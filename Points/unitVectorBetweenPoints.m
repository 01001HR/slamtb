function [ v, V_P1, V_P2 ] = unitVectorBetweenPoints( p1, p2 )
%UNITVECTORBETWEENPOINTS returns the unit vector V from P1 to P2
%   V = UNITVECTORBETWEENPOINTS( P1, P2 ) returns the unit vector V from P1
%   to P2. 
%
%   [V, V_P1, V_P2] = UNITVECTORBETWEENPOINTS( ... ) returns the unit
%   vector V and the jacobians wrt points

if nargout > 1 % jacobians
    V_P1 = [... 
[ (p1(2)^2 - 2*p1(2)*p2(2) + p2(2)^2 + p1(3)^2 - 2*p1(3)*p2(3) + p2(3)^2)/((p1(1) - p2(1))^2 + (p1(2) - p2(2))^2 + (p1(3) - p2(3))^2)^(3/2),                              -((p1(1) - p2(1))*(p1(2) - p2(2)))/((p1(1) - p2(1))^2 + (p1(2) - p2(2))^2 + (p1(3) - p2(3))^2)^(3/2),                              -((p1(1) - p2(1))*(p1(3) - p2(3)))/((p1(1) - p2(1))^2 + (p1(2) - p2(2))^2 + (p1(3) - p2(3))^2)^(3/2)];...
[                              -((p1(1) - p2(1))*(p1(2) - p2(2)))/((p1(1) - p2(1))^2 + (p1(2) - p2(2))^2 + (p1(3) - p2(3))^2)^(3/2), (p1(1)^2 - 2*p1(1)*p2(1) + p2(1)^2 + p1(3)^2 - 2*p1(3)*p2(3) + p2(3)^2)/((p1(1) - p2(1))^2 + (p1(2) - p2(2))^2 + (p1(3) - p2(3))^2)^(3/2),                              -((p1(2) - p2(2))*(p1(3) - p2(3)))/((p1(1) - p2(1))^2 + (p1(2) - p2(2))^2 + (p1(3) - p2(3))^2)^(3/2)];...
[                              -((p1(1) - p2(1))*(p1(3) - p2(3)))/((p1(1) - p2(1))^2 + (p1(2) - p2(2))^2 + (p1(3) - p2(3))^2)^(3/2),                              -((p1(2) - p2(2))*(p1(3) - p2(3)))/((p1(1) - p2(1))^2 + (p1(2) - p2(2))^2 + (p1(3) - p2(3))^2)^(3/2), (p1(1)^2 - 2*p1(1)*p2(1) + p2(1)^2 + p1(2)^2 - 2*p1(2)*p2(2) + p2(2)^2)/((p1(1) - p2(1))^2 + (p1(2) - p2(2))^2 + (p1(3) - p2(3))^2)^(3/2)]];

    V_P2 = [...
[ -(p1(2)^2 - 2*p1(2)*p2(2) + p2(2)^2 + p1(3)^2 - 2*p1(3)*p2(3) + p2(3)^2)/((p1(1) - p2(1))^2 + (p1(2) - p2(2))^2 + (p1(3) - p2(3))^2)^(3/2),                                ((p1(1) - p2(1))*(p1(2) - p2(2)))/((p1(1) - p2(1))^2 + (p1(2) - p2(2))^2 + (p1(3) - p2(3))^2)^(3/2),                                ((p1(1) - p2(1))*(p1(3) - p2(3)))/((p1(1) - p2(1))^2 + (p1(2) - p2(2))^2 + (p1(3) - p2(3))^2)^(3/2)];...
[                                ((p1(1) - p2(1))*(p1(2) - p2(2)))/((p1(1) - p2(1))^2 + (p1(2) - p2(2))^2 + (p1(3) - p2(3))^2)^(3/2), -(p1(1)^2 - 2*p1(1)*p2(1) + p2(1)^2 + p1(3)^2 - 2*p1(3)*p2(3) + p2(3)^2)/((p1(1) - p2(1))^2 + (p1(2) - p2(2))^2 + (p1(3) - p2(3))^2)^(3/2),                                ((p1(2) - p2(2))*(p1(3) - p2(3)))/((p1(1) - p2(1))^2 + (p1(2) - p2(2))^2 + (p1(3) - p2(3))^2)^(3/2)];...
[                                ((p1(1) - p2(1))*(p1(3) - p2(3)))/((p1(1) - p2(1))^2 + (p1(2) - p2(2))^2 + (p1(3) - p2(3))^2)^(3/2),                                ((p1(2) - p2(2))*(p1(3) - p2(3)))/((p1(1) - p2(1))^2 + (p1(2) - p2(2))^2 + (p1(3) - p2(3))^2)^(3/2), -(p1(1)^2 - 2*p1(1)*p2(1) + p2(1)^2 + p1(2)^2 - 2*p1(2)*p2(2) + p2(2)^2)/((p1(1) - p2(1))^2 + (p1(2) - p2(2))^2 + (p1(3) - p2(3))^2)^(3/2)]];

end

v = (p1 - p2)/norm(p1 - p2);

return


%% Jacobians

syms p1x p1y p1z p2x p2y p2z real
p1 = [p1x; p1y; p1z]
p2 = [p2x; p2y; p2z]
v = (p1 - p2)/norm(p1 - p2)
simplify(jacobian(v,p1))
simplify(jacobian(v,p2))