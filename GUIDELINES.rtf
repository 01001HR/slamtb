{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf480
{\fonttbl\f0\fmodern\fcharset77 Courier;}
{\colortbl;\red255\green255\blue255;\red160\green32\blue240;}
\paperw11900\paperh16840\margl1440\margr1440\vieww12880\viewh12740\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\fs24 \cf0 PROGRAMMING GUIDELINES:\
\
=== 24 March 2009 ===\
\
1. Matlab Help\
\
% FUN One line description with one space between % and FUN.\
%	FUN(X,Y) Longer description, with explanation of function inputs X and Y \
%	and the output. There is one TAB space between % and FUN(). The function name \
%	is in CAPITAL LETTERS. Preferably, the input variables X and Y are also in\
%	capital letters.\
%\
%	If the paragraph above is too complex, brake it into different paragraphs.\
%\
%	If the list of input arguments is too complex, make a list here. Explain ALL \
%	input arguments.\
%\
%	FUN(X,Y,Z) explain extra inputs here and what do they do. Explain if they \
%	have a default value.\
%\
%	[out, OUT_x, OUT_y] = FUN(...) returns the Jacobians wrt X and Y. Maybe you \
%	have to explain something else.\
%\
%	Before saving, select entire paragraphs and do RIGHT CLICK, "Wrap selected \
%	comments". This equals all line lengths to approximately the page width.\
%\
%	See also FUN2, FUN3. Use it exactly like this "See also " + func. names in \
%	CAPITAL LETTERS.\
\
% 	(c) 2009 You @ LAAS-CNRS. Make yourself famous. See that this comment line is \
%	disconnected from the Help body.\
\
\
\
2. Functions code GUIDELINES:\
\
2a. Comment every group of lines performing a coherent action before the group. Example:\
\
% get idps to delete\
used    = [Lmk.used];\
idps    = strcmp(\{Lmk.type\},'idpPnt');\
drawn   = (strcmp((get([MapFig.estLmk.ellipse],\cf2 'visible'\cf0 )),\cf2 'on'\cf0 ))';\
delIdps = drawn & idps & ~used;\
\
2b. Comment individual lines on the right if more info is needed. Example:\
\
% get idps to delete\
used    = [Lmk.used];                	% used lmks\
idps    = strcmp(\{Lmk.type\},'idpPnt');	% lmks that are inverse-depth\
drawn   = (strcmp((get([MapFig.estLmk.ellipse],\cf2 'visible'\cf0 )),\cf2 'on'\cf0 ))'; % previously drawn\
delIdps = drawn & idps & ~used;			% these need to be deleted\
\
\
2c. Separate all groups of lines with an empty line so that the code does not look packed. As a rule, no more than 4 lines should go together.\
\
2d. Before saving the function, do CNTRL-A, CNTRL_I to make all the indents look nice.\
\
\
\
3. Names of variables and Jacobians.\
\
For convention, we are going to do the following:\
\
3a. Variables inside functions have short names in small letters normally.\
3b. Jacobians are BIG_small, where X_y = dx/dy\
3c. Jacobians are not Xy, better X_y.\
3d. Robot, landmark, sensor etc indices are always rob, sen, lmk, obs.\
3e. Robot , landmark, sensor etc identifiers are rid, sid, lid, etc.\
\
\
\
4. Using logical vectors to select desired parts.\
\
Use the logical forms. Examples:\
\
 	used  = [Lmk.used];\
	vis   = [Obs.vis];\
	drawn = (strcmp((get([MapFig.estLmk.ellipse],\cf2 'visible'\cf0 )),\cf2 'on'\cf0 ))';\
\
Compose the logicals to get new logicals. Example:\
\
	erase = ~vis & drawn;\
\
When setting logicals, always use true/false, not 1/0:\
\
	Lmk(1).vis = true;    	% Do not use 1 instead of true, otherwise\
	Obs(2).vis = false;		% you would turn the whole logical vector into numeric.\
\
\
\
5. Function readability, part II: ALIGNED CODE READS WELL !\
\
5a. When using consecutive lines of code, try to vertically align all EQUAL signs. Examples:\
\
GOOD: code reads easy\
	x        = f(y);\
	variable = fun(z);\
	JAC_x    = JAC_y*Y_x;\
\
BAD: code is a pack\
	x = f(y);\
	variable = fun(z);\
	JAC_x = JAC_y*Y_x;\
\
5b. Similarly, when commenting multiple lines on the right margin, align comments. Examples:\
\
GOOD:\
	x        = f(y);			% these lines\
	variable = fun(z);		% are all easy \
	JAC_x    = JAC_y*Y_x;	% to read\
\
BAD:\
	x        = f(y); %these lines\
	variable = fun(z); % are not easy\
	JAC_x    = JAC_y*Y_x; % to read\
\
5c. Exceptions are accepted, but use common sense. Examples\
\
GOOD:\
	x        = f(y);				% these comments are aligned\
	variable = g(z);				% with the fourth line.\
	JAC_x    = JAC_y*Y_x + Z_a*A_variable*VARIABLE_x; % This comment is out!\
	output   = JAC_x*P*JAC_x';	% this margin defines the alignment above\
	extra    = I*dont*know;		% over all it is easy to read.\
\
NOT SO GOOD, BUT OK:\
	x        = f(y);			% these comments are NOT aligned\
	variable = g(z);			% with the fourth and fifth lines.\
	JAC_x    = JAC_y*Y_x + Z_a*A_variable*VARIABLE_x; % This comment is out!\
	output   = JAC_x*P*JAC_x';	% this margin is new\
	extra    = I*dont*know;		% over all it is easy to read.\
\
5d. Still, you can try to align different groups of lines. Example\
\
	x        = f(y);				% these comments\
	variable = g(z);				% are aligned\
	output   = JAC_x*P*JAC_x';	% and alignment continues in next group\
\
	y        = 4;				% this follows the same alignment\
	extra    = 5*eye(3);			% over all it is easy to read.\
\
\
\
6. Make exceptional use of line breaking "..." when functions have long names or many long parameters. Example:\
\
[out, OUT_x, OUT_y, OUT_z, OUT_par, OUT_calibration] = ...\
	functionNameThatMightBeVeryLong(...\
				Lmk.state.x,...				% you can put\
				Sen(4).par.y,...				% comments here\
				Obs(sen,lmk).nom.N,...		% if necessary\
				Sen(4).par.k,...				% to explain the\
				Sen(4).par.cal);				% input data\
\
See USERDATA.M, CREATEMAPFIG.M to see examples of this.\
\
}