function drawIdpLin(MapFig,Lmk,color,MapOpt)

% DRAWIDPLIN  Draw inverse-depth line landmark in MapFig.

global Map

r   = Lmk.state.r; % range
idl = Map.x(r); % mean
IDL = Map.P(r,r); % covariances matrix
t   = [Lmk.par.endp.t]'; % abscissas of endpoints, t = [t1;t2]

% extract endpoints - mean and covariance
[e1,e2,E1_idl,E2_idl] = idpLinEndpoints(idl,t(1),t(2));
E1 = E1_idl*IDL*E1_idl';
E2 = E2_idl*IDL*E2_idl';

% the mean:
set(MapFig.Lmk(Lmk.lmk).mean,...
    'xdata',   [e1(1);e2(1)],...
    'ydata',   [e1(2);e2(2)],...
    'zdata',   [e1(3);e2(3)],...
    'color',   color.mean,...
    'marker',  'none',...
    'visible', 'on');

% the covariance ellipses
if MapOpt.showEllip
    [X,Y,Z] = cov3elli(e1, E1, 3, 10) ;
    set(MapFig.Lmk(Lmk.lmk).ellipse(1),...
        'xdata',   X,...
        'ydata',   Y,...
        'zdata',   Z,...
        'color',   color.ellip,...
        'visible', 'on');

    [X,Y,Z] = cov3elli(e2, E2, 3, 10) ;
    set(MapFig.Lmk(Lmk.lmk).ellipse(2),...
        'xdata',   X,...
        'ydata',   Y,...
        'zdata',   Z,...
        'color',   color.ellip,...
        'visible', 'on');
end

% the label
e = e2-e1;
n = null([e e e]); % Inverse depth line's normal vector
n = n(:,1);
posOffset = 0.2*n;     % label orthogonally out of the line.
set(MapFig.Lmk(Lmk.lmk).label,...
    'position', 0.5*(e1+e2) + posOffset,...
    'string',   num2str(Lmk.id),...
    'visible',  'on');
